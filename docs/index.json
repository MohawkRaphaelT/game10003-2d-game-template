{
  "api/Game10003.Audio.html": {
    "href": "api/Game10003.Audio.html",
    "title": "Class Audio",
    "keywords": "Class Audio Namespace Game10003 Assembly GAME 10003 Game Development Foundations - 2D Game Template.dll Access audio functions. public static class Audio Inheritance object Audio Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks A static wrapper to standardize raylib's audio API. Properties LoadedMusic Get an array of all loaded music. public static Music[] LoadedMusic { get; } Property Value Music[] LoadedSounds Get an array of all loaded sounds. public static Sound[] LoadedSounds { get; } Property Value Sound[] Methods GetMusicLength(Music) Get the length of music in seconds. public static float GetMusicLength(Music music) Parameters music Music The music data to check. Returns float Returns the length of audio file music in seconds. IsPlaying(Music) Checks if music is playing. public static bool IsPlaying(Music music) Parameters music Music The music to check. Returns bool Returns true if playing, false otherwise. IsPlaying(Sound) Checks if sound is playing. public static bool IsPlaying(Sound sound) Parameters sound Sound The sound to check. Returns bool Returns true if playing, false otherwise. LoadMusic(string) Loads a music file at filePath. public static Music LoadMusic(string filePath) Parameters filePath string The file path to the audio file. Returns Music Returns the loaded music data. Remarks Music should be more than 10s long, otherwise use Sound. Supported file types: FLAC, MOD, MP3, OGG, QOA, WAV, XM. LoadSound(string) Loads a sound file at filePath. public static Sound LoadSound(string filePath) Parameters filePath string The file path to the audio file. Returns Sound Returns the loaded sound data. Remarks Sound should be 10s or less, otherwise use Music. Supported file types: FLAC, MOD, MP3, OGG, QOA, WAV, XM. Pause(Music) Pause a playing music. public static void Pause(Music music) Parameters music Music The music to pause. Pause(Sound) Pause a playing sound. public static void Pause(Sound sound) Parameters sound Sound The sound to pause. Play(Music) Plays music. public static void Play(Music music) Parameters music Music The music to play. Play(Sound) Plays sound. public static void Play(Sound sound) Parameters sound Sound The sound to play. Resume(Music) Resumes a paused music. public static void Resume(Music music) Parameters music Music The music to resume. Resume(Sound) Resumes a paused sound. public static void Resume(Sound sound) Parameters sound Sound The sound to resume. SetPan(Music, float) Sets the pan for music. public static void SetPan(Music music, float pan) Parameters music Music The music to pan. pan float The pan value. 0.5 is center, 0 left, and 1 right. SetPan(Sound, float) Sets the pan for sound. public static void SetPan(Sound sound, float pan) Parameters sound Sound The sound to pan. pan float The pan value. 0.5 is center, 0 left, and 1 right. SetPitch(Music, float) Sets the pitch for music. public static void SetPitch(Music music, float pitch) Parameters music Music The music to pitch. pitch float The pitch value. 1.0 is the base pitch level. SetPitch(Sound, float) Sets the pitch for sound. public static void SetPitch(Sound sound, float pitch) Parameters sound Sound The sound to pitch. pitch float The pitch value. 1.0 is the base pitch level. SetVolume(Music, float) Sets the volume for music. public static void SetVolume(Music music, float volume) Parameters music Music The music to set. volume float The volume amount. 0 is silent, 1 is max volume. SetVolume(Sound, float) Sets the volume for sound. public static void SetVolume(Sound sound, float volume) Parameters sound Sound The sound to set. volume float The volume amount. 0 is silent, 1 is max volume. Stop(Music) Stop a playing or paused music. public static void Stop(Music music) Parameters music Music The music to stop. Stop(Sound) Stop a playing or paused sound. public static void Stop(Sound sound) Parameters sound Sound The sound to stop. UnloadMusic(Music) Unloads music from memory. public static void UnloadMusic(Music music) Parameters music Music The music to unload. UnloadSound(Sound) Unloads a sound from memory. public static void UnloadSound(Sound sound) Parameters sound Sound The sound to unload."
  },
  "api/Game10003.Color.html": {
    "href": "api/Game10003.Color.html",
    "title": "Struct Color",
    "keywords": "Struct Color Namespace Game10003 Assembly GAME 10003 Game Development Foundations - 2D Game Template.dll Represents an RGBA color (32-bit). public struct Color Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors Color() Create a new color. Black. public Color() Color(int) Create a new grayscale color using the intensity value. public Color(int intensity) Parameters intensity int The intesity (brightness). Color(int, int) Create a new grayscale color using the intensity value with opacity. public Color(int intensity, int opacity) Parameters intensity int The intesity (brightness). opacity int 0 for fully translucid, 255 for fully opaque. Color(int, int, int) Creates a new RGB color. public Color(int r, int g, int b) Parameters r int Red color channel. g int Green color channel. b int Blue color channel. Color(int, int, int, int) Creates a new RGBA color. public Color(int r, int g, int b, int a) Parameters r int Red color channel. g int Green color channel. b int Blue color channel. a int Alpha channel. Fields Black RGB(0, 0, 0) public static readonly Color Black Field Value Color Blue RGB(0, 0, 255) public static readonly Color Blue Field Value Color Clear Fully transparent. RGBA(0, 0, 0, 0) public static readonly Color Clear Field Value Color Cyan RGB(0, 255, 255) public static readonly Color Cyan Field Value Color DarkGray RGB(63, 63, 63) public static readonly Color DarkGray Field Value Color Gray RGB(127, 127, 127) public static readonly Color Gray Field Value Color Green RGB(0, 255, 0) public static readonly Color Green Field Value Color LightGray RGB(195, 195, 195) public static readonly Color LightGray Field Value Color Magenta RGB(255, 0, 255) public static readonly Color Magenta Field Value Color OffWhite RGB(240, 240, 240) public static readonly Color OffWhite Field Value Color Red RGB(255, 0, 0) public static readonly Color Red Field Value Color White RGB(255, 255, 255) public static readonly Color White Field Value Color Yellow RGB(255, 255, 0) public static readonly Color Yellow Field Value Color Properties A Alpha colour channel. public int A { readonly get; set; } Property Value int B Blue colour channel. public int B { readonly get; set; } Property Value int G Green colour channel. public int G { readonly get; set; } Property Value int R Red colour channel. public int R { readonly get; set; } Property Value int"
  },
  "api/Game10003.ControllerAxis.html": {
    "href": "api/Game10003.ControllerAxis.html",
    "title": "Enum ControllerAxis",
    "keywords": "Enum ControllerAxis Namespace Game10003 Assembly GAME 10003 Game Development Foundations - 2D Game Template.dll Defines the various controller axes (analog inputs) in a generic way. public enum ControllerAxis Fields LeftTrigger = 4 Controller left side back trigger, pressure level: 1 through -1 LeftX = 0 Controller left stick horizontal axis LeftY = 1 Controller left stick vertical axis RightTrigger = 5 Controller right side back trigger, pressure level: 1 through -1 RightX = 2 Controller right stick horizontal axis RightY = 3 Controller right stick vertical axis Remarks Wrapper around Raylib's GamepadAxis"
  },
  "api/Game10003.ControllerButton.html": {
    "href": "api/Game10003.ControllerButton.html",
    "title": "Enum ControllerButton",
    "keywords": "Enum ControllerButton Namespace Game10003 Assembly GAME 10003 Game Development Foundations - 2D Game Template.dll Defines the various controller buttons (gitial inputs) on a generic way. public enum ControllerButton Fields LeftFaceDown = 2 Controller left directional-pad down button LeftFaceLeft = 3 Controller left directional-pad left button LeftFaceRight = 1 Controller left directional-pad right button LeftFaceUp = 0 Controller left directional-pad up button LeftThumb = 15 Controller left side joystick button (i.e: push into joystick) LeftTrigger1 = 8 Controller top/back trigger left (first), it could be a trailing button LeftTrigger2 = 9 Controller top/back trigger left (second), it could be a trailing button Middle = 13 Controller center buttons, middle one (i.e. PS3: PS, Xbox: XBOX) MiddleLeft = 12 Controller center buttons, left one (i.e. PS3: Select) MiddleRight = 14 Controller center buttons, right one (i.e. PS3: Start) RightFaceDown = 6 Controller right button down (i.e. PS3: Cross, Xbox: A) RightFaceLeft = 7 Controller right button left (i.e. PS3: Circle, Xbox: B) RightFaceRight = 5 Controller right button right (i.e. PS3: Square, Xbox: X) RightFaceUp = 4 Controller right button up (i.e. PS3: Triangle, Xbox: Y) RightThumb = 16 Controller right side joystick button (i.e: push into joystick) RightTrigger1 = 10 Controller top/back trigger right (first), it could be a trailing button RightTrigger2 = 11 Controller top/back trigger right (second), it could be a trailing button Remarks Wrapper around Raylib's GamepadButton"
  },
  "api/Game10003.Draw.html": {
    "href": "api/Game10003.Draw.html",
    "title": "Class Draw",
    "keywords": "Class Draw Namespace Game10003 Assembly GAME 10003 Game Development Foundations - 2D Game Template.dll Access shape drawing functions. public static class Draw Inheritance object Draw Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks A static wrapper to standardize raylib's draw API. Properties FillColor Shape fill color. public static Color FillColor { get; set; } Property Value Color LineColor Line and outline color. public static Color LineColor { get; set; } Property Value Color LineSize Line and outline size in pixels. public static float LineSize { get; set; } Property Value float Methods Circle(Vector2, float) Draw a filled and outlined circle at position expanding outward to radius using LineSize for the outline thickness, LineColor for the line's color, and FillColor for the circle's fill color. public static void Circle(Vector2 position, float radius) Parameters position Vector2 The circle position, defines the centre point. radius float The circle radius. Circle(float, float, float) Draw a filled and outlined circle at position (x, y) expanding outward to radius using LineSize for the outline thickness, LineColor for the line's color, and FillColor for the circle's fill color. public static void Circle(float x, float y, float radius) Parameters x float The circle's X position, defines the horizontal centre. y float The circle's Y position, defines the vertical centre. radius float The circle radius. Ellipse(Vector2, Vector2) Draw a filled and outlined ellipse at position expanding outward to size using LineSize for the outline thickness, LineColor for the line's color, and FillColor for the ellipse's fill Color. public static void Ellipse(Vector2 position, Vector2 size) Parameters position Vector2 The ellipse position, defines the centre point. size Vector2 The size of the ellipse. Ellipse(float, float, float, float) Draw a filled and outlined ellipse at position (x, y) expanding outward to size (w, h) using LineSize for the outline thickness, LineColor for the line's color, and FillColor for the ellipse's fill Color. public static void Ellipse(float x, float y, float w, float h) Parameters x float The ellipse's X position, defines the horizontal centre. y float The ellipse's Y position, defines the vertical centre. w float The ellipse's width. h float The ellipse's height. Line(Vector2, Vector2) Draw a line with rounded ends from start to end using LineSize and LineColor. public static void Line(Vector2 start, Vector2 end) Parameters start Vector2 Line start position. end Vector2 Line end position. Line(float, float, float, float) Draw a line with rounded ends from (x0, y0) to (x1, y1) using LineSize and LineColor. public static void Line(float x0, float y0, float x1, float y1) Parameters x0 float Line start position X. y0 float Line start position Y. x1 float Line end position X. y1 float Line end position Y. LineSharp(Vector2, Vector2) Draw a line with sharp ends from start to end using LineSize and LineColor. public static void LineSharp(Vector2 start, Vector2 end) Parameters start Vector2 Line start position. end Vector2 Line end position. LineSharp(float, float, float, float) Draw a line with sharp ends from (x0, y0) to (x1, y1) using LineSize and LineColor. public static void LineSharp(float x0, float y0, float x1, float y1) Parameters x0 float Line start position X. y0 float Line start position Y. x1 float Line end position X. y1 float Line end position Y. PolyLine(params Vector2[]) Draw lines with rounded ends between all points using LineSize and LineColor public static void PolyLine(params Vector2[] points) Parameters points Vector2[] The points to draw between. PolyLine(params float[]) Draw lines with rounded ends between all xyCoordinates (pairs) using LineSize and LineColor public static void PolyLine(params float[] xyCoordinates) Parameters xyCoordinates float[] The X and Y coordinates to draw between. Remarks Order of coordinates is: X, Y, X, Y, etc. If the number of coordinates passed is uneven (missing X or Y), the last coordinate will be dropped. Quad(Vector2, Vector2, Vector2, Vector2) Draw a filled and outlined quad with corners at positions position1, position2, position3, and position4 using LineSize for the outline thickness, LineColor for the line's color, and FillColor for the quad's fill color. public static void Quad(Vector2 position1, Vector2 position2, Vector2 position3, Vector2 position4) Parameters position1 Vector2 The quad's first corner's position. position2 Vector2 The quad's second corner's position. position3 Vector2 The quad's third corner's position. position4 Vector2 The quad's third corner's position. Quad(float, float, float, float, float, float, float, float) Draw a filled and outlined quad with corners at positions (x1, y1), (x2, y2), (x3, y3), and (x4, y4) using LineSize for the outline thickness, LineColor for the line's color, and FillColor for the quad's fill color. public static void Quad(float x1, float y1, float x2, float y2, float x3, float y3, float x4, float y4) Parameters x1 float The quad's first corner's X position. y1 float The quad's first corner's Y position. x2 float The quad's second corner's X position. y2 float The quad's second corner's Y position. x3 float The quad's third corner's X position. y3 float The quad's third corner's Y position. x4 float The quad's fourth corner's X position. y4 float The quad's fourth corner's Y position. Rectangle(Vector2, Vector2) Draw a filled and outlined rectangle at position expanding right and down to size using LineSize for the outline thickness, LineColor for the line's color, and FillColor for the rectangle's fill Color. public static void Rectangle(Vector2 position, Vector2 size) Parameters position Vector2 The rectangle position, defines the upper-left corner. size Vector2 The size of the rectangle. Rectangle(float, float, float, float) Draw a filled and outlined rectangle at position (x, y) expanding right and down to size (w, h) using LineSize for the outline thickness, LineColor for the line's color, and FillColor for the rectangle's fill Color. public static void Rectangle(float x, float y, float w, float h) Parameters x float The rectangle's X position, defines the left edge. y float The rectangle's Y position, defines the top edge. w float The rectangle's width. h float The rectangle's height. Square(Vector2, float) Draw a filled and outlined square at position expanding right and down to size using LineSize for the outline thickness, LineColor for the line's color, and FillColor for the square's fill Color. public static void Square(Vector2 position, float size) Parameters position Vector2 The square position, defines the upper-left corner. size float The square's width and height. Square(float, float, float) Draw a filled and outlined square at position (x, y) expanding right and down to size using LineSize for the outline thickness, LineColor for the line's color, and FillColor for the square's fill Color. public static void Square(float x, float y, float size) Parameters x float The square's X position, defines the left edge. y float The square's Y position, defines the top edge. size float The square's width and height. Triangle(Vector2, Vector2, Vector2) Draw a filled and outlined triangle with corners at positions position1, position2, and position3 using LineSize for the outline thickness, LineColor for the line's color, and FillColor for the triangle's fill color. public static void Triangle(Vector2 position1, Vector2 position2, Vector2 position3) Parameters position1 Vector2 The triangle's first corner's position. position2 Vector2 The triangle's second corner's position. position3 Vector2 The triangle's third corner's position. Triangle(float, float, float, float, float, float) Draw a filled and outlined triangle with corners at positions (x1, y1), (x2, y2), and (x3, y3) using LineSize for the outline thickness, LineColor for the line's color, and FillColor for the triangle's fill color. public static void Triangle(float x1, float y1, float x2, float y2, float x3, float y3) Parameters x1 float The triangle's first corner's X position. y1 float The triangle's first corner's Y position. x2 float The triangle's second corner's X position. y2 float The triangle's second corner's Y position. x3 float The triangle's third corner's X position. y3 float The triangle's third corner's Y position."
  },
  "api/Game10003.Font.html": {
    "href": "api/Game10003.Font.html",
    "title": "Struct Font",
    "keywords": "Struct Font Namespace Game10003 Assembly GAME 10003 Game Development Foundations - 2D Game Template.dll Represents a font. public readonly record struct Font : IEquatable<Font> Implements IEquatable<Font> Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Remarks Wrapper around Raylib.Font Properties FileName Name of this font file. public string FileName { get; init; } Property Value string FilePath File path of this font. public string FilePath { get; init; } Property Value string"
  },
  "api/Game10003.Game.html": {
    "href": "api/Game10003.Game.html",
    "title": "Class Game",
    "keywords": "Class Game Namespace Game10003 Assembly GAME 10003 Game Development Foundations - 2D Game Template.dll Your game code goes inside this class! public class Game Inheritance object Game Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Setup() Setup runs once before the game loop begins. public void Setup() Update() Update runs every frame. public void Update()"
  },
  "api/Game10003.Graphics.html": {
    "href": "api/Game10003.Graphics.html",
    "title": "Class Graphics",
    "keywords": "Class Graphics Namespace Game10003 Assembly GAME 10003 Game Development Foundations - 2D Game Template.dll Access texture drawing functions. public static class Graphics Inheritance object Graphics Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks A static wrapper to standardize raylib's texture drawing API. Properties LoadedTextures Get an array of all loaded music. public static Texture2D[] LoadedTextures { get; } Property Value Texture2D[] Rotation Angle rotation of graphics in degrees. public static float Rotation { get; set; } Property Value float Scale Scale of graphics. Default is 1. public static float Scale { get; set; } Property Value float Tint Color tint of graphics. DEfault is white. public static Color Tint { get; set; } Property Value Color Methods Draw(Texture2D, Vector2) Draw a texture graphic to the screen at position. public static void Draw(Texture2D texture, Vector2 position) Parameters texture Texture2D The texture to draw. position Vector2 The position to draw at. Draw(Texture2D, float, float) Draw a texture graphic to the screen at position (x, y). public static void Draw(Texture2D texture, float x, float y) Parameters texture Texture2D The texture to draw. x float The X position to draw at. y float The Y position to draw at. DrawSubset(Texture2D, Vector2, Vector2, Vector2) Draw a subset of texture graphic at screen position. Subset begins at upper-left corner subsetOrigin and size of subsetSize. public static void DrawSubset(Texture2D texture, Vector2 position, Vector2 subsetOrigin, Vector2 subsetSize) Parameters texture Texture2D The texture to draw. position Vector2 The position to draw at. subsetOrigin Vector2 Subset origin within the texture. subsetSize Vector2 Subset size within the texture. DrawSubset(Texture2D, Vector2, Vector2, Vector2, Vector2) Draw a subset of texture graphic at screen position. Subset begins at upper-left corner subsetOrigin and size of subsetSize. rotationOrigin is the point around which the subset is rotated; default is upper-left corner. public static void DrawSubset(Texture2D texture, Vector2 position, Vector2 subsetOrigin, Vector2 subsetSize, Vector2 rotationOrigin) Parameters texture Texture2D The texture to draw. position Vector2 The position to draw at. subsetOrigin Vector2 Subset origin within the texture. subsetSize Vector2 Subset size within the texture. rotationOrigin Vector2 Rotation origin of the texture subset. LoadTexture(string) Loads texture at filePath into GPU memory. public static Texture2D LoadTexture(string filePath) Parameters filePath string The texture file path. Returns Texture2D Returns the loaded texture. Remarks This is slow and reads from disk. Reuse the resulting Texture2D where possible rather than laoding again from disk. UnloadTexture(Texture2D) Unloads texture from GPU memory. public static void UnloadTexture(Texture2D texture) Parameters texture Texture2D The texture to unload from GPU memory."
  },
  "api/Game10003.Input.html": {
    "href": "api/Game10003.Input.html",
    "title": "Class Input",
    "keywords": "Class Input Namespace Game10003 Assembly GAME 10003 Game Development Foundations - 2D Game Template.dll Access player input functions. public static class Input Inheritance object Input Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks A static wrapper to standardize raylib's gamepad API. Methods ConnectedControllerCount() Checks how many controllers are connected to the host device. public static int ConnectedControllerCount() Returns int Returns the number of controllers connected to this device. DisableMouseCursor() Disables mouse cursor while in window. public static void DisableMouseCursor() EnableMouseCursor() Enables mouse cursor while in window. public static void EnableMouseCursor() GetAnyControllerAxis(ControllerAxis, float) Get the controllerAxis value of any controller. Minimum value to register activity is defined by deadzone. public static float GetAnyControllerAxis(ControllerAxis controllerAxis, float deadzone = 0.05) Parameters controllerAxis ControllerAxis The controller axis to check. deadzone float The minimum value needed to register an axis value. Returns float Returns average value of all active controller's controllerAxis. GetControllerAxis(int, ControllerAxis) Get the controllerAxis value of controllerIndex. public static float GetControllerAxis(int controllerIndex, ControllerAxis controllerAxis) Parameters controllerIndex int Which controller to check. controllerAxis ControllerAxis The controller axis to check. Returns float Returns a value 0-1 of specified controller. GetMouseDeltaPosition() Gets the movement of mouse between last frame and this frame. public static Vector2 GetMouseDeltaPosition() Returns Vector2 Returns the pixel delta position between frames. GetMousePosition() Gets the mouse position on screen this frame. public static Vector2 GetMousePosition() Returns Vector2 Returns the Vector2 mouse position on screen in pixel coordinates. GetMouseWheel() Gets the mouse wheel movement this frame. public static Vector2 GetMouseWheel() Returns Vector2 Returns the Vector2 mouse wheel movement. GetMouseWheelX() Gets the mouse wheel's X movement this frame. public static float GetMouseWheelX() Returns float Returns the mouse wheel X movement. GetMouseWheelY() Gets the mouse wheel's Y movement this frame. public static float GetMouseWheelY() Returns float Returns the mouse wheel Y movement. GetMouseX() Gets the mouse X position on screen this frame. public static float GetMouseX() Returns float Returns the X mouse position on screen in pixel coordinates. GetMouseY() Gets the mouse Y position on screen this frame. public static float GetMouseY() Returns float Returns the mouse Y position on screen in pixel coordinates. HideMouseCursor() Hides mouse cursor in window. public static void HideMouseCursor() IsAnyControllerButtonDown(ControllerButton) Checks if controller number controllerButton is down on any controller this frame. public static bool IsAnyControllerButtonDown(ControllerButton controllerButton) Parameters controllerButton ControllerButton The controller button to check. Returns bool Returns true if controllerButton of any controller is down this frame, false otherwise. IsAnyControllerButtonPressed(ControllerButton) Checks if controller number controllerButton was pressed on any controller this frame. public static bool IsAnyControllerButtonPressed(ControllerButton controllerButton) Parameters controllerButton ControllerButton The controller button to check. Returns bool Returns true if controllerButton of any controller was pressed this frame, false otherwise. IsAnyControllerButtonReleased(ControllerButton) Checks if controller number controllerButton was released on any controller this frame. public static bool IsAnyControllerButtonReleased(ControllerButton controllerButton) Parameters controllerButton ControllerButton The controller button to check. Returns bool Returns true if controllerButton of any controller was releaed this frame, false otherwise. IsAnyControllerButtonUp(ControllerButton) Checks if controller number controllerButton is up on any controller this frame. public static bool IsAnyControllerButtonUp(ControllerButton controllerButton) Parameters controllerButton ControllerButton The controller button to check. Returns bool Returns true if controllerButton of any controller is up this frame, false otherwise. IsControllerAvailable(int) Checks to see if controller number controllerIndex is connected to the host device. public static bool IsControllerAvailable(int controllerIndex) Parameters controllerIndex int Which controller to check availability of. Returns bool Returns true if controller is connected, false otherwise. IsControllerButtonDown(int, ControllerButton) Checks if controller number controllerIndex's controllerButton is down this frame. public static bool IsControllerButtonDown(int controllerIndex, ControllerButton controllerButton) Parameters controllerIndex int Which controller to check. controllerButton ControllerButton The controller button to check. Returns bool Returns true if controllerButton of controllerIndex is down this frame, false otherwise. IsControllerButtonPressed(int, ControllerButton) Checks if controller number controllerIndex's controllerButton was pressed this frame. public static bool IsControllerButtonPressed(int controllerIndex, ControllerButton controllerButton) Parameters controllerIndex int Which controller to check. controllerButton ControllerButton The controller button to check. Returns bool Returns true if controllerButton of controllerIndex was pressed this frame, false otherwise. IsControllerButtonReleased(int, ControllerButton) Checks if controller number controllerIndex's controllerButton was released this frame. public static bool IsControllerButtonReleased(int controllerIndex, ControllerButton controllerButton) Parameters controllerIndex int Which controller to check. controllerButton ControllerButton The controller button to check. Returns bool Returns true if controllerButton of controllerIndex was released this frame, false otherwise. IsControllerButtonUp(int, ControllerButton) Checks if controller number controllerIndex's controllerButton is up this frame. public static bool IsControllerButtonUp(int controllerIndex, ControllerButton controllerButton) Parameters controllerIndex int Which controller to check. controllerButton ControllerButton The controller button to check. Returns bool Returns true if controllerButton of controllerIndex is up this frame, false otherwise. IsKeyboardKeyDown(KeyboardInput) Checks if keyboard key is down this frame. public static bool IsKeyboardKeyDown(KeyboardInput key) Parameters key KeyboardInput The keyboard key to check. Returns bool Returns true if key is down this frame, false otherwise. IsKeyboardKeyPressed(KeyboardInput) Checks if keyboard key was pressed this frame. public static bool IsKeyboardKeyPressed(KeyboardInput key) Parameters key KeyboardInput The keyboard key to check. Returns bool Returns true if key was pressed this frame, false otherwise. IsKeyboardKeyReleased(KeyboardInput) Checks if keyboard key was released this frame. public static bool IsKeyboardKeyReleased(KeyboardInput key) Parameters key KeyboardInput The keyboard key to check. Returns bool Returns true if key was released this frame, false otherwise. IsKeyboardKeyUp(KeyboardInput) Checks if keyboard key is up this frame. public static bool IsKeyboardKeyUp(KeyboardInput key) Parameters key KeyboardInput The keyboard key to check. Returns bool Returns true if key is up this frame, false otherwise. IsMouseButtonDown(MouseInput) Checks if mouse button is down this frame. public static bool IsMouseButtonDown(MouseInput button) Parameters button MouseInput The mouse button to check. Returns bool Returns true if mouse button is down this frame, false otherwise. IsMouseButtonPressed(MouseInput) Checks if mouse button was pressed this frame. public static bool IsMouseButtonPressed(MouseInput button) Parameters button MouseInput The mouse button to check. Returns bool Returns true if mouse button was pressed this frame, false otherwise. IsMouseButtonReleased(MouseInput) Checks if mouse button was released this frame. public static bool IsMouseButtonReleased(MouseInput button) Parameters button MouseInput The mouse button to check. Returns bool Returns true if mouse button was released this frame, false otherwise. IsMouseButtonUp(MouseInput) Checks if mouse button is up this frame. public static bool IsMouseButtonUp(MouseInput button) Parameters button MouseInput The mouse button to check. Returns bool Returns true if mouse button is up this frame, false otherwise. IsMouseCursorHidden() Check if the mouse is hidden. public static bool IsMouseCursorHidden() Returns bool Returns true if mouse is hidden, false otherwise. IsMouseCursorOnScreen() Checks if the mouse is inside the window. public static bool IsMouseCursorOnScreen() Returns bool Returns true if mouse is inside the window, false otherwise. ShowMouseCursor() Shows mouse cursor in window. public static void ShowMouseCursor()"
  },
  "api/Game10003.KeyboardInput.html": {
    "href": "api/Game10003.KeyboardInput.html",
    "title": "Enum KeyboardInput",
    "keywords": "Enum KeyboardInput Namespace Game10003 Assembly GAME 10003 Game Development Foundations - 2D Game Template.dll Defines keyboard keys. public enum KeyboardInput Fields A = 65 Apostrophe = 39 B = 66 Back = 4 Backslash = 92 Backspace = 259 C = 67 CapsLock = 280 Comma = 44 D = 68 Delete = 261 Down = 264 E = 69 Eight = 56 End = 269 Enter = 257 Equal = 61 Escape = 256 F = 70 F1 = 290 F10 = 299 F11 = 300 F12 = 301 F2 = 291 F3 = 292 F4 = 293 F5 = 294 F6 = 295 F7 = 296 F8 = 297 F9 = 298 Five = 53 Four = 52 G = 71 Grave = 96 H = 72 Home = 268 I = 73 Insert = 260 J = 74 K = 75 KeyboardMenu = 348 Kp0 = 320 Kp1 = 321 Kp2 = 322 Kp3 = 323 Kp4 = 324 Kp5 = 325 Kp6 = 326 Kp7 = 327 Kp8 = 328 Kp9 = 329 KpAdd = 334 KpDecimal = 330 KpDivide = 331 KpEnter = 335 KpEqual = 336 KpMultiply = 332 KpSubtract = 333 L = 76 Left = 263 LeftAlt = 342 LeftBracket = 91 LeftControl = 341 LeftShift = 340 LeftSuper = 343 M = 77 Menu = 82 Minus = 45 N = 78 Nine = 57 Null = 0 Used for no key pressed. NumLock = 282 O = 79 One = 49 P = 80 PageDown = 267 PageUp = 266 Pause = 284 Period = 46 PrintScreen = 283 Q = 81 R = 82 Right = 262 RightAlt = 346 RightBracket = 93 RightControl = 345 RightShift = 344 RightSuper = 347 S = 83 ScrollLock = 281 Semicolon = 59 Seven = 55 Six = 54 Slash = 47 Space = 32 T = 84 Tab = 258 Three = 51 Two = 50 U = 85 Up = 265 V = 86 VolumeDown = 25 VolumeUp = 24 W = 87 X = 88 Y = 89 Z = 90 Zero = 48 Remarks Wrapper around Raylib's KeyboardKey"
  },
  "api/Game10003.MouseInput.html": {
    "href": "api/Game10003.MouseInput.html",
    "title": "Enum MouseInput",
    "keywords": "Enum MouseInput Namespace Game10003 Assembly GAME 10003 Game Development Foundations - 2D Game Template.dll Defines mouse buttons. public enum MouseInput Fields Back = 6 Back mouse button. Extra = 4 Extra mouse button extra. Forward = 5 Forward mouse button. Left = 0 Left mouse button. Middle = 2 Middle mouse button. Right = 1 Right mouse button. Side = 3 Side mouse button. Remarks Wrapper around Raylib's MouseButton"
  },
  "api/Game10003.Music.html": {
    "href": "api/Game10003.Music.html",
    "title": "Struct Music",
    "keywords": "Struct Music Namespace Game10003 Assembly GAME 10003 Game Development Foundations - 2D Game Template.dll Represents a music file (audio over 10s long). public readonly record struct Music : IEquatable<Music> Implements IEquatable<Music> Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Remarks Wrapper around Raylib.Music Properties FileName Name of this music file. public string FileName { get; init; } Property Value string FilePath File path of this music. public string FilePath { get; init; } Property Value string"
  },
  "api/Game10003.Random.html": {
    "href": "api/Game10003.Random.html",
    "title": "Class Random",
    "keywords": "Class Random Namespace Game10003 Assembly GAME 10003 Game Development Foundations - 2D Game Template.dll Generate random values. public static class Random Inheritance object Random Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AngleDegrees() Get a random angle in degrees as a floating-point number. public static float AngleDegrees() Returns float Returns a random value from 0.0f (inclusize) to 360.0f (exclusive). AngleRadians() Get a random angle in radians as a floating-point number. public static float AngleRadians() Returns float Returns a random value from 0.0f (inclusize) to 6.283185307f (exclusive). Bool() Get a random Boolean (true or false). public static bool Bool() Returns bool Returns a random value of either true or false. Byte() Get a random byte. public static byte Byte() Returns byte Returns a random value from 0 (inclusize) to 256 (exclusive). Byte(byte) Get a random byte. public static byte Byte(byte max) Parameters max byte The maximum value (excluded from range). Returns byte Returns a random value from 0 (inclusize) to max (exclusive). Byte(byte, byte) Get a random byte. public static byte Byte(byte min, byte max) Parameters min byte The minimum value (included from range). max byte The maximum value (excluded from range). Returns byte Returns a random value from min (inclusize) to max (exclusive). CoinFlip() Get a random Boolean (true or false). public static bool CoinFlip() Returns bool Returns a random value of either true or false. Color() Get a random color. public static Color Color() Returns Color Returns a random color with R, G, and B component values of different values from 0 (inclusize) to 256 (exclusive). A is always 255 (opaque). Direction() Get a random direction vector. public static Vector2 Direction() Returns Vector2 Returns a random direction vector in any possible direction, where the length of the vector is always exactly 1.0f. Float() Get a random floating-point number. public static float Float() Returns float Returns a random value from 0.0f (inclusize) to 1.0f (exclusive). Float(float) Get a random floating-point number. public static float Float(float max) Parameters max float The maximum value (excluded from range). Returns float Returns a random value from 0.0f (inclusize) to max (exclusive). Float(float, float) Get a random floating-point number. public static float Float(float min, float max) Parameters min float The minimum value (included from range). max float The maximum value (excluded from range). Returns float Returns a random value from min (inclusize) to max (exclusive). GrayscaleColor() Get a random grayscale color. public static Color GrayscaleColor() Returns Color Returns a random color with R, G, and B component values of the same value from 0 (inclusize) to 256 (exclusive). A is always 255 (opaque). Integer() Get a random integer. public static int Integer() Returns int Returns a random value from 0 (inclusize) to 2,147,483,647 (exclusive). Integer(int) Get a random integer. public static int Integer(int max) Parameters max int The maximum value (excluded from range). Returns int Returns a random value from 0 (inclusize) to max (exclusive). Integer(int, int) Get a random integer. public static int Integer(int min, int max) Parameters min int The minimum value (included from range). max int The maximum value (excluded from range). Returns int Returns a random value from min (inclusize) to max (exclusive). PointInCircle() Get a random point inside a unit circle. public static Vector2 PointInCircle() Returns Vector2 Returns a random value from (-1.0f, -1.0f) (exclusive) to (1.0f, 1.0f) (exclusive), where the max length of the vector is 1.0f. PointOnCircle() Get a random point on a unit circle. public static Vector2 PointOnCircle() Returns Vector2 Returns a random point on a circle, where the length of the vector is always exactly 1.0f. Vector2() Get a random Vector2. public static Vector2 Vector2() Returns Vector2 Returns a random value from (0.0f, 0.0f) (inclusize) to (1.0f, 1.0f) (exclusive). Vector2(Vector2) Get a random Vector2. public static Vector2 Vector2(Vector2 max) Parameters max Vector2 The maximum value (excluded from range). Returns Vector2 Returns a random value from (0.0f, 0.0f) (inclusize) to (max, max) (exclusive). Vector2(Vector2, Vector2) Get a random Vector2. public static Vector2 Vector2(Vector2 min, Vector2 max) Parameters min Vector2 The minimum value (included from range). max Vector2 The maximum value (excluded from range). Returns Vector2 Returns a random value from (min, min) (inclusize) to (max, max) (exclusive). Vector2(float, float) Get a random Vector2. public static Vector2 Vector2(float maxX, float maxY) Parameters maxX float The maximum X value (excluded from range). maxY float The maximum Y value (excluded from range). Returns Vector2 Returns a random value from (0.0f, 0.0f) (inclusize) to (maxX, maxY) (exclusive). Vector2(float, float, float, float) Get a random Vector2. public static Vector2 Vector2(float minX, float maxX, float minY, float maxY) Parameters minX float The minimum X value (excluded from range). maxX float The maximum X value (excluded from range). minY float The minimum Y value (excluded from range). maxY float The maximum Y value (excluded from range). Returns Vector2 Returns a random value from (minX, minY) (inclusize) to (maxX, maxY) (exclusive)."
  },
  "api/Game10003.Sound.html": {
    "href": "api/Game10003.Sound.html",
    "title": "Struct Sound",
    "keywords": "Struct Sound Namespace Game10003 Assembly GAME 10003 Game Development Foundations - 2D Game Template.dll Represents a sound file (audio 10s or less). public readonly record struct Sound : IEquatable<Sound> Implements IEquatable<Sound> Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Remarks Wrapper around Raylib.Sound Properties FileName Name of this sound file. public string FileName { get; init; } Property Value string FilePath File path of this sound. public string FilePath { get; init; } Property Value string"
  },
  "api/Game10003.Text.html": {
    "href": "api/Game10003.Text.html",
    "title": "Class Text",
    "keywords": "Class Text Namespace Game10003 Assembly GAME 10003 Game Development Foundations - 2D Game Template.dll Access text drawing functions. public static class Text Inheritance object Text Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks A static wrapper to standardize raylib's text API. Properties Color Text color. public static Color Color { get; set; } Property Value Color Font Text font. public static Font Font { get; set; } Property Value Font FontName Name of Font. public static string FontName { get; } Property Value string Kerning Text kerning (space between letters) in pixels. public static int Kerning { get; set; } Property Value int Remarks Default is 0px. LoadedFonts Get an array of all loaded music. public static Font[] LoadedFonts { get; } Property Value Font[] MonospaceFont Default monospace font. public static Font MonospaceFont { get; } Property Value Font MonospaceFontName Name of MonospaceFont. public static string MonospaceFontName { get; } Property Value string Rotation Text rotation in degrees (0-360), clockwise. public static float Rotation { get; set; } Property Value float Size Text size in pixels. public static int Size { get; set; } Property Value int Methods Draw(string, Vector2) Draws text at position on screen. public static void Draw(string text, Vector2 position) Parameters text string The text to draw. position Vector2 The position to draw text at. Draw(string, Vector2, Font) Draws text at position on screen using font. public static void Draw(string text, Vector2 position, Font font) Parameters text string The text to draw. position Vector2 The position to draw text at. font Font The font to draw with. Draw(string, float, float) Draws text at position (x, y) on screen. public static void Draw(string text, float x, float y) Parameters text string The text to draw. x float The X position to draw text at. y float The Y position to draw text at. Draw(string, float, float, Font) Draws text at position (x, y) on screen using font. public static void Draw(string text, float x, float y, Font font) Parameters text string The text to draw. x float The X position to draw text at. y float The Y position to draw text at. font Font The font to draw with. Initialize() Loads the inital fonts. public static void Initialize() LoadFont(string) Loads the typeface specified at filePath. public static Font LoadFont(string filePath) Parameters filePath string The path to the font file. Returns Font Returns the loaded Font. LoadFont(string, string) Loads the typeface with filename and extension in the user's system font directory (folder). public static Font LoadFont(string filename, string extension) Parameters filename string The font's file name. extension string The font's extension. Returns Font Returns the loaded Font. ResetFont() Resets Font to the default font. public static void ResetFont() UnloadFont(Font) Unloads a font from memory. public static void UnloadFont(Font font) Parameters font Font The font to unload."
  },
  "api/Game10003.Texture2D.html": {
    "href": "api/Game10003.Texture2D.html",
    "title": "Struct Texture2D",
    "keywords": "Struct Texture2D Namespace Game10003 Assembly GAME 10003 Game Development Foundations - 2D Game Template.dll Represents a 2D texture. public readonly record struct Texture2D : IEquatable<Texture2D> Implements IEquatable<Texture2D> Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Remarks Wrapper around Raylib.Texture2D Properties FileName Name of this texture file. public string FileName { get; init; } Property Value string FilePath File path of this texture. public string FilePath { get; init; } Property Value string Height Texture height in pixels. public int Height { get; } Property Value int Width Texture width in pixels. public int Width { get; } Property Value int"
  },
  "api/Game10003.Time.html": {
    "href": "api/Game10003.Time.html",
    "title": "Class Time",
    "keywords": "Class Time Namespace Game10003 Assembly GAME 10003 Game Development Foundations - 2D Game Template.dll Access time information. public static class Time Inheritance object Time Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks A static wrapper to standardize raylib's time API. Properties DeltaTime The time between the last frame and this frame in seconds. public static float DeltaTime { get; } Property Value float FramesElapsed How many frames have elapsed since the program started. public static int FramesElapsed { get; set; } Property Value int SecondsElapsed How much time in seconds has elapsed since the program started. public static float SecondsElapsed { get; set; } Property Value float"
  },
  "api/Game10003.Window.html": {
    "href": "api/Game10003.Window.html",
    "title": "Class Window",
    "keywords": "Class Window Namespace Game10003 Assembly GAME 10003 Game Development Foundations - 2D Game Template.dll Access window information. public static class Window Inheritance object Window Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties CurrentFPS How many frames-per-second the window is running at. public static float CurrentFPS { get; } Property Value float Height Height of window in pixels. public static int Height { get; set; } Property Value int Size Size of window in pixels. public static Vector2 Size { get; set; } Property Value Vector2 TargetFPS How many frames-per-second (FPS) the game tries to output every second. public static int TargetFPS { get; set; } Property Value int Title Title displayed on top of program window. public static string Title { get; set; } Property Value string Width Width of window in pixels. public static int Width { get; set; } Property Value int Methods ClearBackground(Color) Clears the window canvas to the specified color. public static void ClearBackground(Color color) Parameters color Color The background color to paint. SetSize(int, int) Set the window size in pixels. public static void SetSize(int width, int height) Parameters width int Width of window in pixels. height int Height of window in pixels. SetTitle(string) Set the program window title. public static void SetTitle(string value) Parameters value string The new title to display."
  },
  "api/Game10003.html": {
    "href": "api/Game10003.html",
    "title": "Namespace Game10003",
    "keywords": "Namespace Game10003 Classes Audio Access audio functions. Draw Access shape drawing functions. Game Your game code goes inside this class! Graphics Access texture drawing functions. Input Access player input functions. Random Generate random values. Text Access text drawing functions. Time Access time information. Window Access window information. Structs Color Represents an RGBA color (32-bit). Font Represents a font. Music Represents a music file (audio over 10s long). Sound Represents a sound file (audio 10s or less). Texture2D Represents a 2D texture. Enums ControllerAxis Defines the various controller axes (analog inputs) in a generic way. ControllerButton Defines the various controller buttons (gitial inputs) on a generic way. KeyboardInput Defines keyboard keys. MouseInput Defines mouse buttons."
  },
  "index.html": {
    "href": "index.html",
    "title": "2D Game Template",
    "keywords": "2D Game Template A 2D game template for Visual Studio using raylib for Mohawk College's GAME 10003 Game Development Foundations course with the goal to simplify and standardize Raylib_cs' API. API Reference View the Game10003 API Reference."
  }
}